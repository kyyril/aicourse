datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}


//course contains many topics
model Course {
  id            String          @id @default(cuid())
  name          String
  image         String?
  topics        Topic[]
}

//topics contains many chapters
model Topic {
  id            String          @id @default(cuid())
  courseId       String
  name          String

  chapters       Chapter[]
  course Course @relation(fields: [courseId], references: [id])
  @@index([courseId], name:"courseId")
}

model Chapter {
  id            String          @id @default(cuid())
  topicId       String
  name          String
  youtubeSearchQuery String
  videoId String?
  summary String? @db.VarChar(3000)

  questions Question[]
  topic Topic @relation(fields: [topicId], references: [id])
  @@index([topicId], name:"topicId")
}

model Question {
  id            String          @id @default(cuid())
  chapterId       String
  question       String @db.VarChar(3000)
  options        String @db.VarChar(3000)
  answer         String @db.VarChar(3000)
  
  chapter Chapter @relation(fields: [chapterId], references: [id])
@@index([chapterId], name:"chapterId")
}